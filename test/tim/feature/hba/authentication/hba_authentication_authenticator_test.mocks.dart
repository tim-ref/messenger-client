// Mocks generated by Mockito 5.4.2 from annotations
// in fluffychat/test/tim/feature/hba/authentication/hba_authentication_authenticator_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fluffychat/tim/feature/hba/authentication/authenticator.dart' as _i3;
import 'package:fluffychat/tim/feature/hba/authentication/vzd_client.dart' as _i5;
import 'package:fluffychat/tim/shared/tim_auth_token.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTimAuthToken_0 extends _i1.SmartFake implements _i2.TimAuthToken {
  _FakeTimAuthToken_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Authenticator].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticator extends _i1.Mock implements _i3.Authenticator {
  MockAuthenticator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void openAuthenticator(String? challengePath) => super.noSuchMethod(
        Invocation.method(
          #openAuthenticator,
          [challengePath],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void publishAuthToken(String? authCode) => super.noSuchMethod(
        Invocation.method(
          #publishAuthToken,
          [authCode],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<String> waitForAuthCode() => (super.noSuchMethod(
        Invocation.method(
          #waitForAuthCode,
          [],
        ),
        returnValue: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
}

/// A class which mocks [VzdClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockVzdClient extends _i1.Mock implements _i5.VzdClient {
  MockVzdClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> getChallengePath() => (super.noSuchMethod(
        Invocation.method(
          #getChallengePath,
          [],
        ),
        returnValue: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  _i4.Future<_i2.TimAuthToken> authCodeToToken(
    String? challengePath,
    String? authCode,
    String? state,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #authCodeToToken,
          [
            challengePath,
            authCode,
            state,
          ],
        ),
        returnValue: _i4.Future<_i2.TimAuthToken>.value(_FakeTimAuthToken_0(
          this,
          Invocation.method(
            #authCodeToToken,
            [
              challengePath,
              authCode,
              state,
            ],
          ),
        )),
      ) as _i4.Future<_i2.TimAuthToken>);
}
